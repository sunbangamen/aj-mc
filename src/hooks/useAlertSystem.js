import { useState, useEffect, useRef } from 'react'
import { ref, set, get, onValue, update, push } from 'firebase/database'
import { database } from '../services/firebase'
import {
  generateAlerts,
  sortAlertsByPriority,
  getActiveAlerts,
  groupAlertsBySite,
  getAlertCounts,
  DEFAULT_THRESHOLDS,
  startAutoCleanup,
  stopAutoCleanup,
  cleanupAlertHistory,
  cleanupMemoryCache,
  getCacheStatus
} from '../utils/alertSystem'
import { debug, error as logError } from '../utils/log'

/**
 * Phase 14E: Í≤ΩÍ≥† ÏãúÏä§ÌÖú Í¥ÄÎ¶¨ ÌõÖ
 * Í≤ΩÍ≥† ÏÉùÏÑ±, Ï†ÄÏû•, Ï°∞Ìöå, ÌôïÏù∏ Í∏∞Îä• Ï†úÍ≥µ
 */
export const useAlertSystem = () => {
  const [alerts, setAlerts] = useState([])
  const [alertHistory, setAlertHistory] = useState([])
  const [thresholds, setThresholds] = useState(DEFAULT_THRESHOLDS)
  const [alertStats, setAlertStats] = useState({
    total: 0,
    active: 0,
    acknowledged: 0,
    byType: {}
  })
  const [isLoading, setIsLoading] = useState(true)

  const alertsRef = useRef([])
  const sensorListenersRef = useRef({})
  const thresholdCacheRef = useRef({}) // { [siteId|null]: { ts, data } }

  /**
   * ÏûÑÍ≥ÑÍ∞í ÏÑ§Ï†ï Î°úÎìú (ÏÇ¨Ïù¥Ìä∏Î≥Ñ + Ï†ÑÏó≠ Í∏∞Î≥∏Í∞í)
   */
  const loadThresholds = async (siteId = null) => {
    try {
      // Cache hit (30s TTL)
      const cacheKey = siteId || '__global__'
      const cached = thresholdCacheRef.current[cacheKey]
      const now = Date.now()
      if (cached && now - cached.ts < 30_000) {
        debug('‚ö° ÏûÑÍ≥ÑÍ∞í Ï∫êÏãú ÏÇ¨Ïö©:', cacheKey)
        setThresholds(prev => ({ ...prev, ...cached.data }))
        return cached.data
      }

      // Ï†ÑÏó≠ Í∏∞Î≥∏Í∞íÏúºÎ°ú ÏãúÏûë
      let loadedThresholds = { ...DEFAULT_THRESHOLDS }

      // Ï†ÑÏó≠ ÏÑ§Ï†ï Î°úÎìú
      const globalThresholdsRef = ref(database, 'settings/thresholds/global')
      const globalSnapshot = await get(globalThresholdsRef)
      if (globalSnapshot.exists()) {
        const globalThresholds = globalSnapshot.val()
        loadedThresholds = {
          ...loadedThresholds,
          ...globalThresholds
        }
      }

      // ÌäπÏ†ï ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï Î°úÎìú (ÏÇ¨Ïù¥Ìä∏Î≥Ñ Ïö∞ÏÑ†)
      if (siteId) {
        const siteThresholdsRef = ref(database, `settings/thresholds/sites/${siteId}`)
        const siteSnapshot = await get(siteThresholdsRef)
        if (siteSnapshot.exists()) {
          const siteThresholds = siteSnapshot.val()
          // ÏÇ¨Ïù¥Ìä∏Î≥Ñ ÏÑ§Ï†ïÏù¥ ÏûàÎäî ÏÑºÏÑúÎßå ÎçÆÏñ¥Ïì∞Í∏∞
          Object.keys(siteThresholds).forEach(sensorType => {
            loadedThresholds[sensorType] = {
              ...loadedThresholds[sensorType],
              ...siteThresholds[sensorType]
            }
          })
        }
      }

      setThresholds(loadedThresholds)
      thresholdCacheRef.current[cacheKey] = { ts: Date.now(), data: loadedThresholds }
      return loadedThresholds
    } catch (error) {
      logError('ÏûÑÍ≥ÑÍ∞í Î°úÎìú Ïò§Î•ò:', error)
      return DEFAULT_THRESHOLDS
    }
  }

  /**
   * ÏûÑÍ≥ÑÍ∞í ÏÑ§Ï†ï Ï†ÄÏû• (Ï†ÑÏó≠ ÎòêÎäî ÏÇ¨Ïù¥Ìä∏Î≥Ñ)
   */
  const saveThresholds = async (newThresholds, siteId = null) => {
    try {
      let thresholdsRef
      if (siteId) {
        thresholdsRef = ref(database, `settings/thresholds/sites/${siteId}`)
        console.log(`‚úÖ ${siteId} ÏÇ¨Ïù¥Ìä∏Î≥Ñ ÏûÑÍ≥ÑÍ∞í ÏÑ§Ï†ï Ï†ÄÏû• ÏôÑÎ£å`)
      } else {
        thresholdsRef = ref(database, 'settings/thresholds/global')
        console.log('‚úÖ Ï†ÑÏó≠ ÏûÑÍ≥ÑÍ∞í ÏÑ§Ï†ï Ï†ÄÏû• ÏôÑÎ£å')
      }

      await set(thresholdsRef, newThresholds)
      setThresholds(newThresholds)
      return true
    } catch (error) {
      console.error('ÏûÑÍ≥ÑÍ∞í Ï†ÄÏû• Ïò§Î•ò:', error)
      return false
    }
  }

  /**
   * ÌäπÏ†ï ÏÇ¨Ïù¥Ìä∏Ïùò ÏûÑÍ≥ÑÍ∞í Î°úÎìú
   */
  const loadSiteThresholds = async (siteId) => {
    return await loadThresholds(siteId)
  }

  /**
   * ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò Í≤ΩÍ≥† ÏÉùÏÑ± Î∞è Ï†ÄÏû•
   */
  const processAlerts = async (siteId, sensorKey, sensorData, sensorType) => {
    // ÏÇ¨Ïù¥Ìä∏Î≥Ñ ÏûÑÍ≥ÑÍ∞í Î°úÎìú
    const siteThresholds = await loadSiteThresholds(siteId)
    const currentThresholds = siteThresholds[sensorType]
    if (!currentThresholds) return

    // Í≤ΩÍ≥† ÏÉùÏÑ±
    const newAlerts = generateAlerts(
      sensorData,
      sensorType,
      siteId,
      sensorKey,
      currentThresholds
    )

    // ÏÉàÎ°úÏö¥ Í≤ΩÍ≥†Í∞Ä ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå Ï≤òÎ¶¨
    if (newAlerts.length > 0) {
      // Îçî Í∞ïÌôîÎêú Ï§ëÎ≥µ Ï≤¥ÌÅ¨
      const filteredAlerts = newAlerts.filter(newAlert => {
        // alertsRef.currentÍ∞Ä Î∞∞Ïó¥Ïù∏ÏßÄ ÌôïÏù∏
        const currentAlerts = Array.isArray(alertsRef.current) ? alertsRef.current : []

        // ÎèôÏùºÌïú ÏÇ¨Ïù¥Ìä∏, ÏÑºÏÑú, ÌÉÄÏûÖÏùò ÌôúÏÑ± ÏïåÎ¶ºÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
        const hasActiveAlert = currentAlerts.some(existingAlert =>
          !existingAlert.acknowledged &&
          existingAlert.siteId === newAlert.siteId &&
          existingAlert.sensorKey === newAlert.sensorKey &&
          existingAlert.type === newAlert.type
        )

        // ÏµúÍ∑º 5Î∂Ñ ÎÇ¥Ïóê ÎèôÏùºÌïú ÏïåÎ¶ºÏù¥ ÏÉùÏÑ±ÎêòÏóàÎäîÏßÄ ÌôïÏù∏ (Ïä§Ìå∏ Î∞©ÏßÄ)
        const recentThreshold = Date.now() - (5 * 60 * 1000) // 5Î∂Ñ
        const hasRecentAlert = currentAlerts.some(existingAlert =>
          existingAlert.siteId === newAlert.siteId &&
          existingAlert.sensorKey === newAlert.sensorKey &&
          existingAlert.type === newAlert.type &&
          existingAlert.timestamp > recentThreshold
        )

        return !hasActiveAlert && !hasRecentAlert
      })

      if (filteredAlerts.length > 0) {
        for (const alert of filteredAlerts) {
          await saveAlert(alert)
        }

        // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setAlerts(prevAlerts => {
          const updated = [...prevAlerts, ...filteredAlerts]
          // Ï§ëÎ≥µ Ï†úÍ±∞
          const unique = updated.filter((alert, index, self) =>
            index === self.findIndex(a => a.id === alert.id)
          )
          const sorted = sortAlertsByPriority(unique)
          alertsRef.current = sorted // ref ÏóÖÎç∞Ïù¥Ìä∏
          return sorted
        })

        debug(`üö® ${siteId}/${sensorKey}: ${filteredAlerts.length}Í∞ú ÏÉà Í≤ΩÍ≥† ÏÉùÏÑ±`)
      }
    }
  }

  /**
   * Í≤ΩÍ≥†Î•º FirebaseÏóê Ï†ÄÏû•
   */
  const saveAlert = async (alert) => {
    try {
      // ÌôúÏÑ± Í≤ΩÍ≥†Ïóê Ï†ÄÏû•
      const activeAlertRef = ref(database, `alerts/active/${alert.id}`)
      await set(activeAlertRef, alert)

      // ÌûàÏä§ÌÜ†Î¶¨Ïóê Ï†ÄÏû•
      const historyRef = ref(database, 'alerts/history')
      await push(historyRef, alert)

      debug(`üìù Í≤ΩÍ≥† Ï†ÄÏû•: ${alert.id}`)
    } catch (error) {
      logError('Í≤ΩÍ≥† Ï†ÄÏû• Ïò§Î•ò:', error)
    }
  }

  /**
   * Í≤ΩÍ≥† ÌôïÏù∏ Ï≤òÎ¶¨
   */
  const acknowledgeAlert = async (alertId) => {
    try {
      const alertRef = ref(database, `alerts/active/${alertId}`)
      await update(alertRef, {
        acknowledged: true,
        acknowledgedAt: Date.now()
      })

      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setAlerts(prevAlerts => {
        const updated = prevAlerts.map(alert =>
          alert.id === alertId
            ? { ...alert, acknowledged: true, acknowledgedAt: Date.now() }
            : alert
        )
        alertsRef.current = updated
        return updated
      })

      debug(`‚úÖ Í≤ΩÍ≥† ÌôïÏù∏: ${alertId}`)
    } catch (error) {
      logError('Í≤ΩÍ≥† ÌôïÏù∏ Ïò§Î•ò:', error)
    }
  }

  /**
   * Î™®Îì† Í≤ΩÍ≥† ÌôïÏù∏
   */
  const acknowledgeAllAlerts = async () => {
    const activeAlerts = getActiveAlerts(alerts)

    for (const alert of activeAlerts) {
      await acknowledgeAlert(alert.id)
    }
  }

  /**
   * Í≤ΩÍ≥† ÏÇ≠Ï†ú (ÌôïÏù∏Îêú Í≤ΩÍ≥†Îßå)
   */
  const deleteAlert = async (alertId) => {
    try {
      const alertRef = ref(database, `alerts/active/${alertId}`)
      await set(alertRef, null)

      setAlerts(prevAlerts => {
        const updated = prevAlerts.filter(alert => alert.id !== alertId)
        alertsRef.current = updated
        return updated
      })

      debug(`üóëÔ∏è Í≤ΩÍ≥† ÏÇ≠Ï†ú: ${alertId}`)
    } catch (error) {
      logError('Í≤ΩÍ≥† ÏÇ≠Ï†ú Ïò§Î•ò:', error)
    }
  }

  /**
   * Î™®Îì† Í≤ΩÍ≥† ÏÇ≠Ï†ú
   */
  const deleteAllAlerts = async () => {
    try {
      // FirebaseÏóêÏÑú Î™®Îì† ÌôúÏÑ± Í≤ΩÍ≥† ÏÇ≠Ï†ú
      const activeAlertsRef = ref(database, 'alerts/active')
      await set(activeAlertsRef, null)

      // Î°úÏª¨ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      setAlerts([])
      alertsRef.current = []

      debug('üóëÔ∏è Î™®Îì† Í≤ΩÍ≥† ÏÇ≠Ï†ú ÏôÑÎ£å')
    } catch (error) {
      logError('Î™®Îì† Í≤ΩÍ≥† ÏÇ≠Ï†ú Ïò§Î•ò:', error)
    }
  }

  /**
   * Í≤ΩÍ≥† ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú
   */
  const loadAlertHistory = async (days = 7) => {
    try {
      const historyRef = ref(database, 'alerts/history')
      const snapshot = await get(historyRef)

      if (snapshot.exists()) {
        const historyData = snapshot.val()
        const cutoffTime = Date.now() - (days * 24 * 60 * 60 * 1000)

        const recentHistory = Object.values(historyData)
          .filter(alert => alert.timestamp > cutoffTime)
          .sort((a, b) => b.timestamp - a.timestamp)

        setAlertHistory(recentHistory)
      }
    } catch (error) {
      logError('Í≤ΩÍ≥† ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú Ïò§Î•ò:', error)
    }
  }

  /**
   * ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Ïã§ÏãúÍ∞Ñ Í∞êÏßÄ Î∞è Í≤ΩÍ≥† Ï≤òÎ¶¨
   */
  const setupSensorListeners = async () => {
    try {
      // ÌòÑÏû¨ ÏÇ¨Ïù¥Ìä∏ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
      const sitesRef = ref(database, 'sites')
      const sitesSnapshot = await get(sitesRef)

      if (!sitesSnapshot.exists()) return

      const sitesData = sitesSnapshot.val()

      // Í∞Å ÏÇ¨Ïù¥Ìä∏Ïùò ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Í∞êÏßÄ
      Object.entries(sitesData).forEach(([siteId, siteData]) => {
        const sensorsRef = ref(database, `sensors/${siteId}`)

        sensorListenersRef.current[siteId] = onValue(sensorsRef, (snapshot) => {
          if (!snapshot.exists()) return

          const sensorData = snapshot.val()

          // Í∞Å ÏÑºÏÑúÎ≥ÑÎ°ú Í≤ΩÍ≥† Ï≤òÎ¶¨
          Object.entries(sensorData).forEach(([sensorKey, data]) => {
            if (sensorKey === 'history') return

            // ÏÑºÏÑú ÌÉÄÏûÖ Ï∂îÏ∂ú (ultrasonic_01 -> ultrasonic)
            const sensorType = sensorKey.includes('_')
              ? sensorKey.split('_')[0]
              : sensorKey

            processAlerts(siteId, sensorKey, data, sensorType)
          })
        })
      })

      debug('üîî ÏÑºÏÑú Í≤ΩÍ≥† Í∞êÏßÄ ÏãúÏûë')
    } catch (error) {
      logError('ÏÑºÏÑú Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï Ïò§Î•ò:', error)
    }
  }

  /**
   * ÌôúÏÑ± Í≤ΩÍ≥† Ïã§ÏãúÍ∞Ñ Í∞êÏßÄ
   */
  const setupAlertListeners = () => {
    const activeAlertsRef = ref(database, 'alerts/active')

    return onValue(activeAlertsRef, (snapshot) => {
      if (snapshot.exists()) {
        const alertsData = snapshot.val()
        const alertsList = Object.values(alertsData)
        // Ï§ëÎ≥µ Ï†úÍ±∞
        const uniqueAlerts = alertsList.filter((alert, index, self) =>
          index === self.findIndex(a => a.id === alert.id)
        )
        setAlerts(sortAlertsByPriority(uniqueAlerts))
        alertsRef.current = uniqueAlerts
      } else {
        setAlerts([])
        alertsRef.current = []
      }
      setIsLoading(false)
    })
  }

  /**
   * Í≤ΩÍ≥† ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
   */
  useEffect(() => {
    const activeAlerts = getActiveAlerts(alerts)
    const counts = getAlertCounts(alerts)

    setAlertStats({
      total: alerts.length,
      active: activeAlerts.length,
      acknowledged: alerts.length - activeAlerts.length,
      byType: counts
    })
  }, [alerts])

  /**
   * Ï¥àÍ∏∞Ìôî Î∞è Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
   */
  useEffect(() => {
    const initialize = async () => {
      setIsLoading(true)

      // alertsRef Ï¥àÍ∏∞Ìôî
      alertsRef.current = []

      // ÏûÑÍ≥ÑÍ∞í Î°úÎìú
      await loadThresholds()

      // Í≤ΩÍ≥† ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú
      await loadAlertHistory()

      // ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ Í∞êÏßÄ ÏÑ§Ï†ï
      await setupSensorListeners()

      // ÌôúÏÑ± Í≤ΩÍ≥† Í∞êÏßÄ ÏÑ§Ï†ï
      const unsubscribe = setupAlertListeners()

      return unsubscribe
    }

    let unsubscribe
    initialize().then(unsub => {
      unsubscribe = unsub
    })

    // Ï†ïÎ¶¨
    return () => {
      if (unsubscribe) unsubscribe()

      // ÏÑºÏÑú Î¶¨Ïä§ÎÑà Ï†ïÎ¶¨
      Object.values(sensorListenersRef.current).forEach(listener => {
        if (typeof listener === 'function') listener()
      })
    }
  }, [])

  // ÏûêÎèô Ï†ïÎ¶¨ ÏãúÏä§ÌÖú Í¥ÄÎ¶¨
  const startAutomaticCleanup = () => {
    debug('üöÄ Ïä§ÎßàÌä∏ ÏïåÎ¶º ÏãúÏä§ÌÖú ÏûêÎèô Ï†ïÎ¶¨ ÏãúÏûë')
    startAutoCleanup(database)
  }

  const stopAutomaticCleanup = () => {
    debug('‚èπÔ∏è ÏûêÎèô Ï†ïÎ¶¨ ÏãúÏä§ÌÖú Ï§ëÏßÄ')
    stopAutoCleanup()
  }

  const manualCleanup = async () => {
    debug('üßπ ÏàòÎèô Ï†ïÎ¶¨ Ïã§Ìñâ')
    const historyResult = await cleanupAlertHistory(database)
    const cacheResult = cleanupMemoryCache()
    return { historyResult, cacheResult }
  }

  // Í∞úÎ∞úÏö©: Î™®Îì† ÌûàÏä§ÌÜ†Î¶¨ Ï¶âÏãú ÏÇ≠Ï†ú
  const deleteAllHistory = async () => {
    try {
      debug('üóëÔ∏è Î™®Îì† ÏïåÎ¶º ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†ú ÏãúÏûë')

      const historyRef = ref(database, 'alerts/history')
      await set(historyRef, null)

      debug('‚úÖ Î™®Îì† ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†ú ÏôÑÎ£å')
      return { success: true, message: 'Î™®Îì† ÏïåÎ¶º ÌûàÏä§ÌÜ†Î¶¨Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§' }
    } catch (error) {
      logError('‚ùå ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†ú Ïò§Î•ò:', error)
      return { success: false, error: error.message }
    }
  }

  // Í∞úÎ∞úÏö©: ÌôúÏÑ± ÏïåÎ¶ºÎèÑ Î™®Îëê ÏÇ≠Ï†ú
  const deleteAllActiveAlerts = async () => {
    try {
      debug('üóëÔ∏è Î™®Îì† ÌôúÏÑ± ÏïåÎ¶º ÏÇ≠Ï†ú ÏãúÏûë')

      const activeRef = ref(database, 'alerts/active')
      await set(activeRef, null)

      // Î°úÏª¨ ÏÉÅÌÉúÎèÑ Ï¥àÍ∏∞Ìôî
      setAlerts([])
      alertsRef.current = []

      debug('‚úÖ Î™®Îì† ÌôúÏÑ± ÏïåÎ¶º ÏÇ≠Ï†ú ÏôÑÎ£å')
      return { success: true, message: 'Î™®Îì† ÌôúÏÑ± ÏïåÎ¶ºÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§' }
    } catch (error) {
      logError('‚ùå ÌôúÏÑ± ÏïåÎ¶º ÏÇ≠Ï†ú Ïò§Î•ò:', error)
      return { success: false, error: error.message }
    }
  }

  // Í∞úÎ∞úÏö©: Ï†ÑÏ≤¥ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî (Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú)
  const resetAllSystemData = async () => {
    try {
      debug('üî• Ï†ÑÏ≤¥ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏãúÏûë')

      // 1. Î™®Îì† ÏÇ¨Ïù¥Ìä∏ ÏÇ≠Ï†ú
      const sitesRef = ref(database, 'sites')
      await set(sitesRef, null)
      debug('‚úÖ Î™®Îì† ÏÇ¨Ïù¥Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å')

      // 2. Î™®Îì† ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
      const sensorsRef = ref(database, 'sensors')
      await set(sensorsRef, null)
      debug('‚úÖ Î™®Îì† ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å')

      // 3. Î™®Îì† Í≤ΩÍ≥† ÏÇ≠Ï†ú
      const alertsRef = ref(database, 'alerts')
      await set(alertsRef, null)
      debug('‚úÖ Î™®Îì† Í≤ΩÍ≥† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å')

      // 4. Î™®Îì† ÏÑ§Ï†ï ÏÇ≠Ï†ú
      const settingsRef = ref(database, 'settings')
      await set(settingsRef, null)
      debug('‚úÖ Î™®Îì† ÏÑ§Ï†ï Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å')

      // 5. Î°úÏª¨ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      setAlerts([])
      alertsRef.current = []
      setThresholds({})

      debug('üî• Ï†ÑÏ≤¥ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å')
      return {
        success: true,
        message: 'Ï†ÑÏ≤¥ ÏãúÏä§ÌÖúÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.',
        deletedData: ['sites', 'sensors', 'alerts', 'settings']
      }
    } catch (error) {
      logError('‚ùå ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî Ïò§Î•ò:', error)
      return { success: false, error: error.message }
    }
  }

  // Í∞úÎ∞úÏö©: Ï∫êÏãú Ï¶âÏãú Ï¥àÍ∏∞Ìôî
  const clearCache = () => {
    const result = cleanupMemoryCache()
    debug('üßπ Ï∫êÏãú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å')
    return { success: true, cleared: result }
  }

  const getSystemStatus = () => {
    return {
      cache: getCacheStatus(),
      alerts: {
        total: alerts.length,
        active: getActiveAlerts(alerts).length,
        byLevel: getAlertCounts(alerts)
      }
    }
  }

  return {
    // ÏÉÅÌÉú
    alerts,
    alertHistory,
    thresholds,
    alertStats,
    isLoading,

    // Í≤ΩÍ≥† Í¥ÄÎ¶¨
    acknowledgeAlert,
    acknowledgeAllAlerts,
    deleteAlert,
    deleteAllAlerts,
    processAlerts,

    // ÏûÑÍ≥ÑÍ∞í Í¥ÄÎ¶¨
    saveThresholds,
    loadThresholds,
    loadSiteThresholds,

    // ÌûàÏä§ÌÜ†Î¶¨ Í¥ÄÎ¶¨
    loadAlertHistory,

    // Ïã§Î¨¥Ïö© ÏûêÎèô Ï†ïÎ¶¨ ÏãúÏä§ÌÖú
    startAutomaticCleanup,
    stopAutomaticCleanup,
    manualCleanup,
    getSystemStatus,

    // Í∞úÎ∞úÏö© Ï¶âÏãú ÏÇ≠Ï†ú ÎèÑÍµ¨
    deleteAllHistory,
    deleteAllActiveAlerts,
    resetAllSystemData,
    clearCache,

    // Ïú†Ìã∏Î¶¨Ìã∞
    activeAlerts: getActiveAlerts(alerts),
    alertsBySite: groupAlertsBySite(alerts),
    alertCounts: getAlertCounts(alerts)
  }
}
